import 'dart:io';import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import '../../../../../data/exceptions/empty_list_exception.dart';import '../../../../adminFeatures/employees/data/repositories/employees_repository.dart';import '../../../../adminFeatures/employees/domain/entities/AttachmentsEmp.dart';import '../../../../adminFeatures/employees/domain/entities/tab_cashifter.dart';import '../../../../adminFeatures/projectsManagement/data/datasource/projects_management_provider.dart';import '../../../../adminFeatures/usersManagement/data/repositories/users_management_repository.dart';import '../../../common/common_state.dart';@Injectable()class AttachmentEmployeesCubit extends BaseCubit {  final EmployeesRepository _repository;  AttachmentEmployeesCubit(      this._repository,  );  Future<void> addEditFreelancerAttachmentUser(      {required int requirementAttachmentId, required File file}) async {    executeEmitterListener(() => _repository.AddEditFreelancerAttachmentUser(        requirementAttachmentId: requirementAttachmentId, file: file));  }  // fetchAttachments({int? freelancerId}) async {  //   executeBuilder(  //       () => _repository.fetchAttachments(freelancerId: freelancerId),  //       onSuccess: (value) async {  //     final data = value.map((e) => AttachmentsEmp.fromDto(e)).toList();  //     emit(Initialized<List<AttachmentsEmp>>(data: data));  //   });  // }  StreamStateInitial<List<AttachmentsEmp>?> attachmentsEmpStream = StreamStateInitial();  fetchAttachments({   int? statusCode }) async {     attachmentsEmpStream.setData(null);    try {      final result = await _repository.fetchAttachments(freelancerId: 0,statusCode: statusCode);      final data = result.map((e) => AttachmentsEmp.fromDto(e)).toList();      attachmentsEmpStream.setData(data);     if( data.isEmpty )   throw EmptyListException()  ;    } catch (e) {      attachmentsEmpStream.setError(e);    }  }  fetchAttachmentsTabs( ) async {    executeBuilder(() => _repository.fetchTabAttachment(), onSuccess: (result) {      fetchAttachments(statusCode: result.first.id??0, );      emit(Initialized<List<TabCashifter>>(data: result));    });  }}