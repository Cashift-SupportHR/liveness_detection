import 'package:shiftapp/presentation/presentationUser/common/common_state.dart';import 'package:shiftapp/presentation/presentationUser/resources/colors.dart';import 'package:shiftapp/presentation/shared/components/index.dart';import 'package:shiftapp/utils/app_icons.dart';import '../../../data/models/index.dart';import '../../../domain/entities/index.dart';import '../bloc/start_tour_state.dart';import '../widgets/job_duties_tour.dart';class StartTourScreen extends BaseStatelessWidget {  final StartTourState state;  final CurrentRoundTrip? initialData;  final Function(int) onFetchRoundTypeTermsAndCondition;  final Function(AddRoundTripParams) onAddRoundTrip;  StartTourScreen({    Key? key,    required this.state,    this.initialData,    required this.onFetchRoundTypeTermsAndCondition,    required this.onAddRoundTrip,  }) : super(key: key);  final _formKey = GlobalKey<FormState>();  int vehicleZoneId = 0;  int roundTypeId = 0;  StreamStateInitial<bool> isTermsAndConditionsChecked =      StreamStateInitial<bool>();  @override  Widget build(BuildContext context) {    _initData();    return Form(      key: _formKey,      child: Column(        children: [          Expanded(            child: SingleChildScrollView(              padding: const EdgeInsets.all(16),              child: Column(                children: [                  icon(),                  SizedBox(height: 16),                  operatingPlan(),                  tourTypes(),                  jobDuties(),                ],              ),            ),          ),          startButton(context),        ],      ),    );  }  Widget icon() {    return kLoadSvgInCirclePath(AppIcons.start_tour_map);  }  BottomSheetTextFieldRectangle operatingPlan() {    return BottomSheetTextFieldRectangle(      items: Item.fromCommonListItem(state.vehiclesZones),      title: strings.operating_plan,      hintText: strings.select_operating_plan,      initValue: initialData?.vehiclesZoneName ?? '',      onSelectItem: (value) {        vehicleZoneId = value.index;      },    );  }  BottomSheetTextFieldRectangle tourTypes() {    return BottomSheetTextFieldRectangle(      items: Item.fromCommonListItem(state.roundTypes),      title: strings.tour_type,      hintText: strings.select_tour_type,      initValue: initialData?.roundTypeName ?? '',      onSelectItem: (item) {        roundTypeId = item.index;        onFetchRoundTypeTermsAndCondition(item.index);      },    );  }  Align jobDutiesTitle() {    return Align(        alignment: AlignmentDirectional.centerStart,        child: UnderlineText(          text: strings.job_duties,          fontSize: 14,        ));  }  StreamDataStateWidget<List<RoundTypeTermsAndCondition>?> jobDuties() {    return StreamDataStateWidget<List<RoundTypeTermsAndCondition>?>(      stream: state.roundTypeTermsAndConditionStream,      builder: (context, data) {        return Column(          children: [            jobDutiesTitle(),            SizedBox(height: 16),            jobDutiesList(data ?? []),            SizedBox(height: 10),            checkBoxTerms(),          ],        );      },    );  }  JobDutiesTour jobDutiesList(List<RoundTypeTermsAndCondition> data) {    return JobDutiesTour(data: data);  }  Widget checkBoxTerms() {    return CheckBoxTermsAndConditions(      onChanged: (value) {        isTermsAndConditionsChecked.setData(value ?? false);      },    );  }  startButton(BuildContext context) {    return StreamBuilder<bool>(        initialData: false,        stream: isTermsAndConditionsChecked.stream,        builder: (context, snapshot) {          return AppCupertinoButton(            text: strings.start_tour,            margin: EdgeInsets.all(16),            backgroundColor: initialData != null ? kRed_00 : null,            onPressed: (snapshot.data == true)                ? () {                    onAddRoundTripPressed();                  }                : null,          );        });  }  _initData() {    vehicleZoneId = initialData?.vehiclesZoneId ?? 0;    roundTypeId = initialData?.roundTypeId ?? 0;  }  onAddRoundTripPressed() {    if (_formKey.currentState!.validate()) {      onAddRoundTrip(        AddRoundTripParams(          id: initialData?.id ?? 0,          roundTypeId: roundTypeId,          vehiclesZoneId: vehicleZoneId,        ),      );    }  }}