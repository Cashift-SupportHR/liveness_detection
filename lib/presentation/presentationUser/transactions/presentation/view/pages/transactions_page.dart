import 'package:shiftapp/presentation/presentationUser/common/common_state.dart';import 'package:shiftapp/presentation/presentationUser/transactions/presentation/view/pages/transactions_screen.dart';import 'package:shiftapp/presentation/shared/components/text_field/date_time_text_field_picker.dart';import '../../../../../shared/components/index.dart';import '../../../../../shared/components/text_field/text_field_search.dart';import '../../../../salarydefinitionrequest/requests/widgets/title_and_add_new_request.dart';import '../../../data/models/transactions_prams.dart';import '../../../domain/entities/transaction_data.dart';import '../../add/pages/add_transactions_page.dart';import '../cubit/transactions_cubit.dart';class TransactionsPage    extends BaseBlocWidget<Initialized<List<Transactions>>, TransactionsCubit> {  int tabIndex = 1;  @override  String? title(BuildContext context) {    // TODO: implement title    return strings.transactions;  }  @override  void loadInitialData(BuildContext context) {    bloc.fetchTransactions(      TransactionsPrams(status: tabIndex == 1 ? "InProgress" : "Implemented"),    );  }  String? fromDate;  String? toDate;  TextEditingController searchController = TextEditingController();  @override  Widget build(BuildContext context) {    return mainFrame(      body: Column(        children: [          TitleAndAddNewRequest(            title: strings.view_transactions,            textButton: strings.add_transactions,            onTap: () {              AddTransactionsPage.push(                context,                onSuccess: () {                  loadInitialData(context);                },              );            },          ),          Expanded(            child: DynamicTabBarView(              isSeparate: true,              margin: const EdgeInsets.all(0),              padding: const EdgeInsets.all(0),              marginTabs: const EdgeInsets.symmetric(horizontal: 16),              tabs: [                DynamicItem(name: strings.in_progress, id: 1),                DynamicItem(name: strings.completed_tasks, id: 2),              ],              onTap: (index) {                tabIndex = index;                bloc.fetchTransactions(                  TransactionsPrams(                    status: tabIndex == 1 ? "InProgress" : "Implemented",                  ),                );              },              pageWidget: Column(                children: [                  TextFieldSearch(                    title: strings.search,                    controller: searchController,                    suffix: SizedBox(                      width: 20,                      child: InkWell(                        onTap: () {                          if (searchController.text == "" ||                              searchController.text.isNotEmpty)                            searchController.text = "";                          bloc.fetchTransactions(                            TransactionsPrams(                              status:                                  tabIndex == 1 ? "InProgress" : "Implemented",                            ),                          );                        },                        child: Icon(Icons.clear, color: Colors.grey),                      ),                    ),                    onChanged: (value) {                      if (!value.endsWith(' ')) {                        bloc.fetchTransactions(                          TransactionsPrams(                            searchString: value,                            status:                                tabIndex == 1 ? "InProgress" : "Implemented",                          ),                        );                      }                    },                    margin: const EdgeInsets.symmetric(                      horizontal: 10,                      vertical: 7,                    ),                  ),                  Padding(                    padding: const EdgeInsets.symmetric(horizontal: 10),                    child: Row(                      children: [                        Expanded(                          child: DateTimeTextFieldPicker(                            hintText: strings.select,                            title: strings.from,                            onTap: (date) {                              fromDate = date;                              if (fromDate!.isEmpty || toDate!.isEmpty) {                                showErrorDialog(                                  strings.select_date_from_to,                                  context,                                );                              } else {                                bloc.fetchTransactions(                                  TransactionsPrams(                                    status:                                        tabIndex == 1                                            ? "InProgress"                                            : "Implemented",                                    endDateTime: toDate,                                    startDateTime: fromDate,                                  ),                                );                              }                            },                          ),                        ),                        SizedBox(width: 10),                        Expanded(                          child: DateTimeTextFieldPicker(                            hintText: strings.select,                            title: strings.to,                            onTap: (date) {                              toDate = date;                              if (fromDate!.isEmpty || toDate!.isEmpty) {                                showErrorDialog(                                  strings.select_date_from_to,                                  context,                                );                              } else {                                bloc.fetchTransactions(                                  TransactionsPrams(                                    status:                                        tabIndex == 1                                            ? "InProgress"                                            : "Implemented",                                    endDateTime: toDate,                                    startDateTime: fromDate,                                  ),                                );                              }                            },                          ),                        ),                      ],                    ),                  ),                  SizedBox(height: 15),                  Expanded(child: buildConsumer(context)),                ],              ),            ),          ),        ],      ),    );  }  @override  Widget buildWidget(    BuildContext context,    Initialized<List<Transactions>> state,  ) {    return TransactionsScreen(      data: state.data ?? [],      onUpdate: (params) => bloc.updateTransactions(params),      onReschedule: (params) => bloc.rescheduleTransactions(params),    );  }  @override  void onSuccessDismissed() {    loadInitialData(context);  }}