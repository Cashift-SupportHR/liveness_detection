import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import '../../../../common/common_state.dart';import '../../../data/models/reschedule_transactions_prams.dart';import '../../../data/models/transactions_prams.dart';import '../../../data/models/update_transactions_prams.dart';import '../../../data/repositories/transactions_repository.dart';import '../../../domain/entities/transaction_data.dart';@Injectable()class TransactionsCubit extends BaseCubit {  final TransactionsRepository _repository;  TransactionsCubit(this._repository);  fetchTransactions(TransactionsPrams prams) async {    executeBuilder(      () => _repository.fetchTransactions(prams),      onSuccess: (value) {        emit(Initialized<List<Transactions>>(data: value));      },    );  }  void updateTransactions(UpdateTransactionsPrams params) {    executeEmitterListener(() => _repository.updateTransactions(params));  }  void rescheduleTransactions(RescheduleTransactionsPrams params) {    executeEmitterListener(() => _repository.rescheduleTransactions(params));  }}