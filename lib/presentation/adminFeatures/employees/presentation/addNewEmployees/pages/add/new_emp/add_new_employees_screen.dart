import 'package:flutter/material.dart';import 'package:shiftapp/extensions/extensions.dart';import 'package:shiftapp/presentation/adminFeatures/usersManagement/domain/entities/company.dart';import 'package:shiftapp/presentation/presentationUser/common/common_state.dart';import 'package:shiftapp/presentation/presentationUser/resources/colors.dart';import 'package:shiftapp/presentation/shared/components/dropdown_filed.dart';import '../../../../../../../../domain/entities/shared/date_formatter.dart';import '../../../../../../../presentationUser/resources/constants.dart';import '../../../../../../../shared/components/base_stateless_widget.dart';import '../../../../../../../shared/components/buttons/row_buttons.dart';import '../../../../../../../shared/components/error_handler_widget.dart';import '../../../../../../../shared/components/radio/radio_grid_list.dart';import '../../../../../../../shared/components/text_field/bottom_sheet_text_field_rectangle.dart';import '../../../../../../../shared/components/text_field/date_text_field_picker.dart';import '../../../../../../../shared/models/common_list_item.dart';import '../../../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../../../usersManagement/presentation/addNewUser/widgets/company_picker.dart';import '../../../../../data/models/add_employee_prameter.dart';import '../../../../../domain/entities/DayRelax.dart';import '../../../../../domain/entities/EmployeeStatuses.dart';import '../../../../../domain/entities/PaymentPeriodTypes.dart';import '../../../../../domain/entities/EmpChasifterData.dart';import '../../../../../domain/entities/project_employee.dart';import '../../../../../domain/entities/shift_employee.dart';import '../../../widgets/relax_day_multi_picker.dart';class AddNewEmployeesScreen extends BaseStatelessWidget {  final int freeLancerInfoId;  final bool isEdit;  final List<ProjectEmployee> projectData;  final List<DayRelax> dayRelax;  List<Company> companies;  EmpChasifter? empChasifter;  StreamStateInitial<List<ShiftEmployee>?> shiftsStream;  StreamStateInitial<List<PaymentPeriodTypes>?> paymentPeriodTypesStream;  StreamStateInitial<List<EmployeeStatuses>?> employeeStatusesStream;  Function(int idProject) fetchTimeWork;  Function() onPrevious;  Function(AddEmployeePrameter addEmployeePrameter) addEditEmployee;  TextEditingController projectController = TextEditingController();  TextEditingController shiftController = TextEditingController();  TextEditingController fromController = TextEditingController();  TextEditingController toController = TextEditingController();  TextEditingController opportunityValueController = TextEditingController();  TextEditingController relaDayController = TextEditingController();  TextEditingController bodyMassController = TextEditingController();  TextEditingController dateLicnaceController = TextEditingController();  TextEditingController wightController = TextEditingController();  TextEditingController lengthController = TextEditingController();  final _formKey = GlobalKey<FormState>();  int? projectId;  int? shiftId;  int? companyId;  int? paymentPeriodTypesId;  int? employeeStatusesId;  List<int>? relaxId;  StreamState<String?> showData = StreamStateInitial();  StreamState<bool> showDataTime = StreamStateInitial();  StreamState<bool> buttonsValidation = StreamStateInitial();  StreamState<bool> isEmergency = StreamStateInitial();  StreamStateInitial<List<CommonListItem>?> projectsStream;  final Function(int id) onFetchProjectsCompanyId;  AddNewEmployeesScreen(      {required this.projectData,      required this.employeeStatusesStream,      required this.freeLancerInfoId,      required this.isEdit,      required this.onPrevious,      required this.companies,      required this.projectsStream,      required this.onFetchProjectsCompanyId,      required this.paymentPeriodTypesStream,      required this.addEditEmployee,      required this.dayRelax,      this.empChasifter,      required this.fetchTimeWork,      required this.shiftsStream});  @override  Widget build(BuildContext context) {    print(empChasifter?.paymentPeriodTypeName);     if (empChasifter?.paymentPeriodTypeName == "monthly" ||        empChasifter?.paymentPeriodTypeName == "شهري") {      showData.setData("monthly");    }    isEdit == true ? showDataTime.setData(true) : showDataTime.setData(false);    if (isEdit == true) {      if (empChasifter?.employeeStatusCode == "1-2") {        isEmergency.setData(true);      } else {        isEmergency.setData(false);      }    }      projectId = empChasifter?.projectId;    shiftId = empChasifter?.shiftId;    companyId = empChasifter?.companyId;    shiftController ==        TextEditingController(text: empChasifter?.shiftName ?? '');    toController =        TextEditingController(text: empChasifter?.toDay.toString() ?? '');    fromController =        TextEditingController(text: empChasifter?.fromDay.toString() ?? '');    relaDayController = TextEditingController(        text: empChasifter?.weekDaysString.toString() ?? '');    employeeStatusesId = empChasifter?.employeeStatusId;    opportunityValueController = TextEditingController(        text: empChasifter?.opportunityValue.toString() ?? '');    paymentPeriodTypesId = empChasifter?.paymentPeriodTypeId;    relaxId = empChasifter?.weekDays;    bodyMassController =        TextEditingController(text: empChasifter?.bodyMass.toString() ?? "");    dateLicnaceController = TextEditingController(        text: DateFormatter.repairApiDateTime(            empChasifter?.licenseExpiryDate ?? "",            pattern: DateFormatter.DATE_Api_DD_MM_YYYY, local: 'en'));    wightController =        TextEditingController(text: empChasifter?.weight.toString() ?? "");    lengthController =        TextEditingController(text: empChasifter?.height.toString() ?? "");    return Scaffold(      bottomNavigationBar: RowButtons(        textCancelButton: strings.previous_button,        onSave: () {          try {            if (_formKey.currentState!.validate()) {              onAddEditPrased();            }          } catch (e) {            print(e);            print("this is error");          }        },        onCancel: () {          onPrevious();        },      ),      body: Form(          key: _formKey,          child: SingleChildScrollView(            padding: const EdgeInsets.all(16),            child: Column(              crossAxisAlignment: CrossAxisAlignment.start,              mainAxisAlignment: MainAxisAlignment.start,              children: [                companiesPicker(),                projectWidget(),                employeeStatusesWidget(context),                StreamBuilder<bool>(                    stream: isEmergency.stream,                    builder: (context, snapshot) {                      return (snapshot.data == null || snapshot.data == false)                          ? Column(                              children: [                                shiftWidget(),                                RelaxDayMultiPicker(                                  items: dayRelax,                                  controller: relaDayController,                                  initialValue: empChasifter?.weekDaysName                                          ?.map((e) => DayRelax(                                              name: e.name,                                              dayValue: e.dayValue))                                          .toList() ??                                      [],                                  onMultiSelectItem: (data) {                                    relaxId =                                        data.map((e) => e.id ?? 0).toList();                                    validationAll();                                  },                                ),                                paymentPeriodTypesWidget(context),                                timeWidget(context),                                opportunityValueWidget(),                              ],                            )                          : SizedBox();                    }),                BodyMassWidget(),                lengthAndWeightWidget(),                expairDateLicenseWidget(),              ],            ),          )),    );  }  Widget companiesPicker() {    return CompanyPicker(      items: companies,      initialValue: empChasifter?.companyName ?? '',      onSelectItem: (item) {        companyId = item            .index; // methodSelectEmployeeId = 0; // companyIdStream.setData(companyId); // jobController!.text = '';        onFetchProjectsCompanyId(item.index);        validationAll();        projectController.clear();        empChasifter?.projectName="";      },    );  }  projectWidget() {    return StreamBuilder<List<CommonListItem>?>(        stream: projectsStream.stream,        builder: (context, snapshot) {          return snapshot.hasData              ? BottomSheetTextFieldRectangle(                  title: strings.project,                  initValue: empChasifter?.projectName ?? '',                  hintText: strings.select_project,                  // initValue: dataDetails?.shiftName ?? '',                  isScrollControlled: true,                  setSearch: true,                  //    controller: projectController,                  items: snapshot.data!                      .map((e) => Item(                          index: e.id ?? 0,                          description: e.name.toString(),                          value: e.name.toString()))                      .toList(),                  onSelectItem: (items) async {                    projectId =                        items.index;                    fetchTimeWork(items.index);                    showDataTime.setData(true);                    shiftController.clear();                    empChasifter?.shiftName="";                    validationAll();                  },                )              : SizedBox();        });  }  opportunityValueWidget() {    return BuildTextFieldItem(      title: strings.opportunity_value,      hintText: strings.opportunity_value,      keyboardType: TextInputType.number,      controller: opportunityValueController,      onChanged: (p0) {        buttonsValidation.setData(true);      },    );  } //كتلة  الجسم  BodyMassWidget() {    return BuildTextFieldItem(      title: strings.body_mass,      hintText: strings.write_body_mass,      keyboardType: TextInputType.number,      controller: bodyMassController,      onChanged: (p0) {        buttonsValidation.setData(true);      },    );  }  expairDateLicenseWidget() {    return DateTextFieldPicker(      title: strings.expair_date_license,      hintText: strings.select_day,      controller: dateLicnaceController,      pattern: DateFormatter.DATE_Api_DD_MM_YYYY,      onChanged: (p0) {        buttonsValidation.setData(true);      },    );  }  lengthAndWeightWidget() {    return Row(      children: [        Expanded(          child: BuildTextFieldItem(            title: strings.weight,            hintText: strings.enter_weight,            keyboardType: TextInputType.number,            controller: wightController,          ),        ),        SizedBox(          width: 15,        ),        Expanded(          child: BuildTextFieldItem(            title: strings.length,            hintText: strings.enter_length,            keyboardType: TextInputType.number,            controller: lengthController,          ),        ),      ],    );  }  timeWidget(context) {    return StreamBuilder<String?>(        stream: showData.stream,        builder: (context, snapshot) {          return snapshot.data == "monthly" || snapshot.data != null              ? Row(                  children: [                    Expanded(                      child: BuildTextFieldItem(                        title: strings.duration_monthly,                        hintText: strings.from,                        controller: fromController,                        maxLength: 2,                        validator: (value) {                          if (value!.isNullOrEmpty()) {                            return strings.invalid_name;                          } else if (int.parse(value) > 31 ||                              int.parse(value) < 1) {                            return "يجب ان يتراوح الرقم مابين 1  الي 31";                          }                          return null;                        },                      ),                    ),                    SizedBox(                      width: 20,                    ),                    Expanded(                      child: BuildTextFieldItem(                        hintText: strings.to,                        controller: toController,                        maxLength: 2,                        validator: (value) {                          if (value!.isNullOrEmpty()) {                            return strings.invalid_name;                          } else if (int.parse(value) > 31 ||                              int.parse(value) < 1) {                            return "يجب ان يتراوح الرقم مابين 1  الي 31";                          }                          return null;                        },                      ),                    ),                  ],                )              : SizedBox();        });  }  employeeStatusesWidget(context) {    return StreamBuilder<bool>(        stream: showDataTime.stream,        builder: (context, data) {          return (data.data == null || data.data == false)              ? SizedBox()              : StreamBuilder<List<EmployeeStatuses>?>(                  stream: employeeStatusesStream.stream,                  builder: (context, snapshot) {                    return snapshot.data == null                        ? SizedBox()                        : BottomSheetTextFieldRectangle(                            title: strings.state_emp,                            initValue:                                empChasifter?.employeeStatusName.toString() ??                                    '',                            hintText: strings.state_emp,                            isScrollControlled: true,                            setSearch: true,                            items: snapshot.data!                                .map((e) => Item(                                    index: e.id ?? 0,                                    value: e.name.toString(),                                    description: e.code))                                .toList(),                            onSelectItem: (items) async {                              employeeStatusesId = items.index;                              print(employeeStatusesId);                              if (items.description == "1-2") {                                isEmergency.setData(true);                                relaxId?.clear();                                shiftId = null;                                paymentPeriodTypesId = null;                              } else {                                isEmergency.setData(false);                              }                              print("employeeStatusesId");                              isEdit == true                                  ? buttonsValidation.setData(true)                                  : validationAll();                            },                          ); // return Column( //   crossAxisAlignment: CrossAxisAlignment.start, //   mainAxisAlignment: MainAxisAlignment.start, //   children: [ //     SizedBox( //       height: 10, //     ), //     Text( //       strings.state_emp, //       style: kTextBold.copyWith( //         fontSize: 12, //         color: kPrimaryDark, //       ), //     ), //     snapshot.data == null || snapshot.hasError //         ? ErrorPlaceHolderWidget( //             exception: snapshot.error, //             color: kBackground, //           ) //         : RadioGridList( //             crossAxisCount: 3, //             items: snapshot.data! //                 .map((e) => RadioItem( //                     value: e.id.toString() ?? '', //                     title: e.name ?? '', //                     id: e.code.toString() ?? '')) //                 .toList(), //             groupValue: //                 empChasifter?.employeeStatusId.toString() ?? //                     '', //             onChanged: (data) { //               employeeStatusesId = int.parse(data.value); //               print(employeeStatusesId); //               print("employeeStatusesId"); //               validationAll(); //             }), //   ], // );                  });        });  }  paymentPeriodTypesWidget(context) {    return StreamBuilder<bool>(        stream: showDataTime.stream,        builder: (context, data) {          return (data.data == null || data.data == false)              ? SizedBox()              : StreamBuilder<List<PaymentPeriodTypes>?>(                  stream: paymentPeriodTypesStream.stream,                  builder: (context, snapshot) {                    return Column(                      crossAxisAlignment: CrossAxisAlignment.start,                      mainAxisAlignment: MainAxisAlignment.start,                      children: [                        Text(                          strings.calculation_method,                          style: kTextBold.copyWith(                            fontSize: 12,                            color: kPrimaryDark,                          ),                        ),                        snapshot.data == null || snapshot.hasError                            ? ErrorPlaceHolderWidget(                                exception: snapshot.error,                                color: kBackground,                              )                            : RadioGridList(                                crossAxisCount: 3,                                items: snapshot.data!                                    .map((e) => RadioItem(                                        value: e.id.toString() ?? '',                                        title: e.name ?? '',                                        id: e.code.toString() ?? ''))                                    .toList(),                                groupValue: isEdit == true                                    ? empChasifter?.paymentPeriodTypeId                                            .toString() ??                                        ''                                    : snapshot.data?[0].name ?? "",                                onChanged: (data) {                                  paymentPeriodTypesId = int.parse(data.value);                                  print(paymentPeriodTypesId);                                  print("paymentPeriodTypesId ${data.value}");                                  showData.setData(null);                                  if (data.id == "monthly") {                                    showData.setData(data.value);                                  }                                  validationAll();                                }),                      ],                    );                  });        });  }  shiftWidget() {    return StreamBuilder<bool>(        stream: showDataTime.stream,        builder: (context, snapshot) {          return snapshot.data == null || snapshot.data == false              ? SizedBox()              : StreamBuilder<List<ShiftEmployee>?>(                  stream: shiftsStream.stream,                  builder: (context, data) {                    return Column(                      crossAxisAlignment: CrossAxisAlignment.start,                      children: [                        if (data.hasError)                          Text(                            strings.working_time,                            style: kTextMedium.copyWith(                                fontSize: 14, color: kPrimary),                          ),                        data.data == null || data.hasError                            ? ErrorPlaceHolderWidget(                                exception: snapshot.error,                                color: kBackground,                              )                            : BottomSheetTextFieldRectangle(                                title: strings.working_time,                                hintText: strings.select_working_time,                                // initValue: dataDetails?.shiftName ?? '',                                isScrollControlled: true,                                setSearch: true,                                initValue: empChasifter?.shiftName ?? '',                                controller: shiftController,                                items: data.data!                                    .map((e) => Item(                                        index: e.shiftId ?? 0,                                        description: e.shiftName.toString(),                                        value: e.shiftName.toString()))                                    .toList(),                                onSelectItem: (items) async {                                  shiftId = items.index;                                  print(shiftId);                                  print("workTimeId");                                  shiftController.text = items.value;                                  validationAll();                                },                              ),                      ],                    );                  });        });  }  validationAll() {    if (projectId == null ||        companyId == null ||        shiftId == null ||        paymentPeriodTypesId == null ||        employeeStatusesId == null) {      buttonsValidation.setData(false);    } else {      buttonsValidation.setData(true);    }  }  onAddEditPrased() {    print(dateLicnaceController.text);    print("jhjjhjk");    addEditEmployee(AddEmployeePrameter(        id: isEdit == true ? empChasifter?.id : 0,        projectId: projectId,        companyId: companyId,        bodyMass: bodyMassController.text.isEmpty            ? 0            : num.parse(bodyMassController.text),        licenseExpiryDate: dateLicnaceController.text,        height: lengthController.text.isEmpty            ? 0            : num.parse(lengthController.text),        weight:            wightController.text.isEmpty ? 0 : num.parse(wightController.text),        opportunityValue: opportunityValueController.text.isEmpty            ? 0            : num.parse(opportunityValueController.text),        shiftId: shiftId,        toDay:            toController.text.isEmpty ? 0 : int.parse(toController.text ?? "0"),        fromDay:            fromController.text.isEmpty ? 0 : int.parse(fromController.text),        employeeStatusId: employeeStatusesId,        paymentPeriodTypeId: paymentPeriodTypesId,        weekDays: relaxId ?? [],        freeLancerInfoId: freeLancerInfoId));  }}