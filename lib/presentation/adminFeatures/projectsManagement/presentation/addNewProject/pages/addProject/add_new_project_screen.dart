import 'dart:io';import 'package:flutter/material.dart';import 'package:google_maps_flutter/google_maps_flutter.dart';import 'package:shiftapp/extensions/extensions.dart';import 'package:shiftapp/presentation/adminFeatures/projectsManagement/domain/entities/project_labels.dart';import 'package:shiftapp/presentation/adminFeatures/projectsManagement/presentation/addNewProject/pages/addProject/widgets/cities_picker.dart';import 'package:shiftapp/presentation/adminFeatures/projectsManagement/presentation/addNewProject/pages/addProject/widgets/company_picker.dart';import 'package:shiftapp/presentation/adminFeatures/projectsManagement/presentation/addNewProject/pages/addProject/widgets/download_image_file_project.dart';import 'package:shiftapp/utils/app_icons.dart';import '../../../../../../../utils/app_utils.dart';import '../../../../../../presentationUser/common/common_state.dart';import '../../../../../../presentationUser/map_picker/widgets/map_picker_item.dart';import '../../../../../../presentationUser/resources/colors.dart';import '../../../../../../presentationUser/resources/validation.dart';import '../../../../../../shared/components/base_stateless_widget.dart';import '../../../../../../shared/components/buttons/row_buttons.dart';import '../../../../../../shared/components/map/map_picker.dart';import '../../../../../../shared/components/snckBar/snack_bar_manager.dart';import '../../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../../addOpportunity/domain/entities/employee_opportunity_type.dart';import '../../../../../addOpportunity/presentations/widgets/attendance_departure_method_picker.dart';import '../../../../../usersManagement/presentation/addNewUser/widgets/company_picker.dart';import '../../../../data/models/add_project_params.dart';import '../../../../data/models/location_project_params.dart';import '../projectSuccessfullyPage/pages/project_successfully_page.dart';import 'widgets/attendance_departure_report.dart';import 'widgets/brands_picker.dart';class AddNewProjectScreen extends BaseStatelessWidget {  final int projectId;  final InitializedAddNewProject state;  final Function(AddProjectParams) onAddProject;  AddNewProjectScreen({    Key? key,    required this.projectId,    required this.state,    required this.onAddProject,  }) : super(key: key);  TextEditingController projectNameArController = TextEditingController();  TextEditingController projectNameEnController = TextEditingController();  TextEditingController cityArController = TextEditingController();  TextEditingController cityEnController = TextEditingController();  TextEditingController addressArController = TextEditingController();  TextEditingController addressEnController = TextEditingController();  TextEditingController mainLocationController = TextEditingController();  TextEditingController addLocationController = TextEditingController();  int cityId = 0;  int brandId = 0;  int companyId = 0;  int attendanceTypeId = 0;  File imageFile = File('');  String imageUrl = '';  LatLng? mainLocation;  List<LocationProjectParams> additionalLocations = [];  bool isFingerQR = true;  final _formKey = GlobalKey<FormState>();  AddProjectParams addNewUserParams = AddProjectParams();  @override  Widget build(BuildContext context) {    ProjectLabels labels = state.labels;    print(state.projectInfoManager.companyName);    print("jhjkck");    _initialValues();    return Scaffold(      backgroundColor: kBackground,      bottomNavigationBar: RowButtons(        textSaveButton: strings.next,        onSave: () {          if (_formKey.currentState!.validate()) {            onAddProjectPressed(context);          }        },        onCancel: () {          Navigator.pop(context);        },      ),      body: Form(          key: _formKey,          child: SingleChildScrollView(            padding: const EdgeInsets.all(16),            child: Column(              children: [                const SizedBox(                  height: 10,                ),                BuildTextFieldItem(                  title: labels.nameAr ?? strings.project_name_ar,                  hintText: labels.hintNameAr ?? strings.write_user_name,                  keyboardType: TextInputType.name,                  controller: projectNameArController,                  validator: (value) => validateArabicText(value ?? ''),                ),                BuildTextFieldItem(                  title: labels.nameEn ?? strings.project_name_en,                  hintText: labels.hintNameEn ?? strings.write_user_name,                  keyboardType: TextInputType.name,                  controller: projectNameEnController,                  validator: (value) => validateEnglishText(value ?? ''),                ),                CitiesPicker(                  label: labels.cityName,                  hintText: labels.hintCityName,                  initialValue: state.projectInfoManager.cityName,                  items: state.cities,                  onSelectItem: (item) {                    cityId = item.index;                    print(item.index);                  },                ),                CompanyProjectPicker(                  label: labels.companyName,                  hintText: labels.hintCompanyName,                  initialValue: state.projectInfoManager.companyName,                  items: state.company,                  onSelectItem: (item) {                    companyId = item.index;                    print(item.index);                  },                ),                BuildTextFieldItem(                  title: labels.addressProjectAr ?? strings.address_ar,                  hintText: labels.hintAddressProjectAr ?? strings.write_address,                  keyboardType: TextInputType.name,                  controller: addressArController,                  validator: (value) => validateArabicText(value ?? ''),                ),                BuildTextFieldItem(                  title: labels.addressProjectEn ?? strings.address_en,                  hintText: labels.hintAddressProjectEn ?? strings.write_address,                  keyboardType: TextInputType.name,                  controller: addressEnController,                  validator: (value) => validateEnglishText(value ?? ''),                ),                const SizedBox(                  height: 10,                ),                BrandsPicker(                  label: labels.brand,                  hintText: labels.hintBrand,                  initialValue: state.projectInfoManager.brandName,                  items: state.brands,                  onSelectItem: (item) {                    brandId = item.index;                    print(item.index);                  },                ),                BuildTextFieldItem(                  title: strings.main_location,                  hintText: strings.location_name,                  keyboardType: TextInputType.name,                  controller: mainLocationController,                  onTap: () {},                  showCustomEndIcon: true,                  endIcon: AppIcons.locationPickerOutline,                  onTapEndIcon: () async {                    MapPickerItem result = await navigatorMapPicker(context);                    mainLocationController.text = result.formattedAddress ?? '';                    mainLocation = LatLng(result.geometry?.location?.lat ?? 0.0, result.geometry?.location?.lng ?? 0.0);                    print(result.geometry?.location);                  },                ),                DownloadImageFileProject(                  initialValue: state.projectInfoManager.imageURL ?? '',                  onPicker: (value) {                    imageFile = value;                  },                ),                const SizedBox(                  height: 25,                ),                methodArrivalDeparture(),                // AttendanceDepartureReport(                //   labels: labels,                //   initialData: state.projectInfoManager.isFingerPrint ?? isFingerQR,                //   onChanged: (value) {                //     isFingerQR = value;                //   },                // ),                const SizedBox(                  height: 10,                ),              ],            ),          )),    );  }  _initialValues() {    final initialData = state.projectInfoManager;    print('initialData ${initialData.toJson()}');    projectNameArController.text = initialData.nameAr ?? '';    projectNameEnController.text = initialData.nameEn ?? '';    cityId = initialData.cityId ?? 0;    brandId = initialData.brandId ?? 0;    companyId = initialData.companyId ?? 0;    addressArController.text = initialData.addressAr ?? '';    addressEnController.text = initialData.addressEn ?? '';    mainLocationController.text = initialData.latitude ?? '';    addLocationController.text = initialData.longtude ?? '';    mainLocation = LatLng(double.tryParse(initialData.latitude ?? '0.0') ?? 0.0, double.tryParse(initialData.longtude ?? '0.0') ?? 0.0);    additionalLocations = initialData.otherProject ?? [];    imageUrl = initialData.imageURL ?? '';    attendanceTypeId = initialData.attendanceTypeId ?? 0;    print('attendanceTypeId ${initialData.attendanceTypeId}');  }  onAddProjectPressed(BuildContext context) {    print('imageFile ${imageFile.path}');    print('imageUrl ${imageUrl}');    if (projectId == 0) {      if (imageFile.path.isEmpty) {        SnackBarManager.showErrorSnackBar(context, strings.please_add_logo);        return;      }    } else if (imageUrl.isNullOrEmpty() && imageFile.path.isEmpty) {      SnackBarManager.showErrorSnackBar(context, strings.please_add_logo);      return;    }    onAddProject(      AddProjectParams(        id: projectId,        nameAr: projectNameArController.text,        nameEn: projectNameEnController.text,        cityId: cityId,        brandName: '',        cityName: '',        companyId: companyId,        companyName: '',        addressAr: addressArController.text,        addressEn: addressEnController.text,        brandId: brandId,        attendanceTypeId: attendanceTypeId,        latitude: mainLocation?.latitude.toString(),        longtude: mainLocation?.longitude.toString(),        image: imageFile.path,        otherProject: [],        imageURL: state.projectInfoManager.imageURL ?? '',      ),    );  }  validateArabicText(String value) {    if (value.isNullOrEmpty()) {      return strings.this_field_is_required;    } else if (!Validation.isArabicLettersWithNumbers(value)) {      return strings.must_be_arabic_letters;    }    return null;  }  validateEnglishText(String value) {    if (value.isNullOrEmpty()) {      return strings.this_field_is_required;    } else if (!Validation.isEnglishLettersWithNumbers(value)) {      return strings.must_be_english_letters;    }    return null;  }  AttendanceDepartureMethodPicker methodArrivalDeparture() {    return AttendanceDepartureMethodPicker(      initialId: attendanceTypeId,      data: state.arrivalDepartureTypes          .map((e) => EmployeeOpportunityType.fromArrivalDepartureType(e))          .toList(),      onSelectItem: (id) {        attendanceTypeId = id;        print('attendanceTypeId $attendanceTypeId');      },    );  }}