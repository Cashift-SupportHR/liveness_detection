import 'package:get/get.dart';import 'package:get/get_core/src/get_main.dart';import 'package:image_picker/image_picker.dart';import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/extensions/extensions.dart';import '../../../../../../data/models/api_response.dart';import '../../../../../../data/models/salary-definition-request/down_load_salary_definition.dart';import '../../../../../presentationUser/common/common_state.dart';import '../../../../../shared/components/files/files_manager.dart';import '../../../data/repositories/projects_management_repository.dart';import '../../../domain/entities/project_management.dart';@Injectable()class ProjectSuccessfullyCubit extends BaseCubit {  final ProjectsManagementRepository _repository;  ProjectSuccessfullyCubit(this._repository);  Future<void> fetchProjectDataById(int projectId) async {    emit(LoadingState());    try {      final result = await _repository.fetchProjectSuccessfully(projectId);      ProjectManagement project = ProjectManagement.fromDto(result);      emit(Initialized<ProjectManagement>(data: project));    } on Exception catch (e) {      emit(ErrorState(e));    }  }  Future<void> showQrCode(String projectCode, String projectName) async {    emit(LoadingState());    try {      final result = await _repository.downLoadQrCode(projectCode, projectName);      emit(Initialized<DownLoadFileDto>(data: result.payload!));    } on Exception catch (e) {      emit(ErrorState(e));    }  }  Future<void> shareQrCode(      {String? projectCode,        String? projectName,        DownLoadFileDto? data}) async {    emit(LoadingStateListener());    try {      ApiResponse<DownLoadFileDto>? result;      data == null          ? (result = await _repository.downLoadQrCode(          projectCode ?? '', projectName ?? ''))          : null;      String filePath =          await FilesManager().createFileFromBase64(data ?? result!.payload!);      emit(SuccessStateListener<List<XFile>>(data: [XFile(filePath)]));    } on Exception catch (e) {      emit(FailureStateListener(e));    }  }  Future<void> downLoadQrCode(      {String? projectCode,      String? projectName,      DownLoadFileDto? data}) async {    emit(LoadingStateListener());    try {      ApiResponse<DownLoadFileDto>? result;      data == null          ? (result = await _repository.downLoadQrCode(              projectCode ?? '', projectName ?? ''))          : null;      await FilesManager().saveFileFromBase64(data ?? result!.payload!);      emit(SuccessStateListener(data: result?.message ?? Get.context!.getStrings().successfully_downloaded));    } on Exception catch (e) {      emit(FailureStateListener(e));    }  }}