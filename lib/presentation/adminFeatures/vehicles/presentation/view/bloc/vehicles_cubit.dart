import 'package:get/get.dart';import 'package:get/get_core/src/get_main.dart';import 'package:image_picker/image_picker.dart';import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/core/resources/data_state.dart';import 'package:shiftapp/data/exceptions/empty_list_exception.dart';import 'package:shiftapp/extensions/extensions.dart';import '../../../../../../data/models/api_response.dart';import '../../../../../../data/models/salary-definition-request/down_load_salary_definition.dart';import '../../../../../presentationUser/common/common_state.dart';import '../../../../../shared/components/files/files_manager.dart';import '../../../data/models/add_insurance_prams.dart';import '../../../data/repositories/vehicles_repository.dart';import '../../../domain/entities/index.dart';@Injectable()class VehiclesCubit extends BaseCubit {  final VehiclesRepository _repository;  VehiclesCubit(    this._repository,  );  List<Vehicle> vehicles = [];  fetchVehicles() async {    executeBuilder(() => _repository.fetchVehicles(), onSuccess: (result) {      vehicles = result.map((e) => Vehicle.fromDto(e)).toList();      emit(Initialized<List<Vehicle>>(data: vehicles));    });  }  void searchByText(String text) {    if (text.isEmpty) {      emit(Initialized<List<Vehicle>>(data: vehicles));    } else {      final data = vehicles          .where((element) =>              element.vehicleBrandName!.contains(text) ||                  element.companyName!.contains(text) ||                  element.projectName!.contains(text) ||                  element.model!.contains(text) ||                  element.plateNumber!.contains(text) ||              element.licenseNumber!.contains(text) ||              element.vehicleColorName!.contains(text) ||              element.yearOfManufacture!.toString().contains(text))          .toList();      if (data.isEmpty) {        emit(ErrorState(EmptyListException()));        return;      }      emit(Initialized<List<Vehicle>>(data: data));    }  }  fetchVehiclesById(int id) async {    // executeBuilder(() => _repository.fetchVehicleById(id), onSuccess: (result) {    //    //   emit(Initialized<VehicleDetails>(data: result));    // });    executeEmitterData(() => _repository.fetchVehicleById(id));  }  fetchInsurancesByVehicleId(int vehicleId) async {    executeBuilder(() => _repository.fetchInsurancesByVehicleId(vehicleId),        onSuccess: (result) {      final data = result.map((e) => Insurances.fromDto(e)).toList();      emit(Initialized<List<Insurances>>(data: data));    });  }  fetchInsuranceTypes() async {    executeBuilder(() => _repository.fetchInsuranceTypes(),        onSuccess: (result) {      final data = result.map((e) => InsuranceTypes.fromDto(e)).toList();      emit(Initialized<List<InsuranceTypes>>(data: data));    });  }  deleteVehicle({required int id}) async {    executeEmitterListener(      () => _repository.deleteVehicle(id),    );  }  deleteInsurance({required int id}) async {    executeEmitterListener(      () => _repository.deleteInsurance(id),    );  }  addInsurance({required AddInsurancePrams addInsurancePrams}) async {    executeEmitterListener(      () => _repository.addInsurance(addInsurancePrams),    );  }  editInsurance({required AddInsurancePrams addInsurancePrams}) async {    executeEmitterListener(      () => _repository.editInsurance(addInsurancePrams),    );  }  Future<void> showQrCode(int vehicleId) async {    executeBuilder(        () => _repository.qrCodeVehicle(              vehicleId,            ), onSuccess: (value) {      emit(Initialized<DownLoadFileDto>(data: value.payload!));    });  }  Future<void> shareQrCode(      {int? vehicleId,      DownLoadFileDto? data}) async {    emit(LoadingStateListener());    try {      ApiResponse<DownLoadFileDto>? result;      data == null          ? (result = await _repository.qrCodeVehicle(          vehicleId??0  ))          : null;      String filePath =          await FilesManager().createFileFromBase64(data ?? result!.payload!);      emit(SuccessStateListener<List<XFile>>(data: [XFile(filePath)]));    } on Exception catch (e) {      emit(FailureStateListener(e));    }  }  Future<void> downLoadQrCode(      {int? vehicleId,      String? projectName,      DownLoadFileDto? data}) async {    emit(LoadingStateListener());    try {      ApiResponse<DownLoadFileDto>? result;      data == null          ? (result = await _repository.qrCodeVehicle(        vehicleId ?? 0,  ))          : null;      await FilesManager().saveFileFromBase64(data ?? result!.payload!);      emit(SuccessStateListener(          data: result?.message ??              Get.context!.getStrings().successfully_downloaded));    } on Exception catch (e) {      emit(FailureStateListener(e));    }  }}