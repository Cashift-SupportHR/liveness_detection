import 'package:shiftapp/presentation/adminFeatures/vehicles/data/models/vehicle_traking_details_prams.dart';import 'package:shiftapp/presentation/adminFeatures/vehicles/presentation/vehicleTracking/pages/vehicles_tracking_screen.dart';import 'package:shiftapp/presentation/presentationUser/common/common_state.dart';import 'package:shiftapp/presentation/shared/components/index.dart';import '../../../../../shared/components/text_field/date_time_text_field_picker.dart';import '../../../domain/entities/vehicleTraking.dart';import '../bloc/vehicles_tracking_cubit.dart';class VehiclesTrackingPage extends BaseBlocWidget<    Initialized<VehicleTrackingEntity>, VehiclesTrackingCubit> {  String? fromDate;  String? toDate;  @override  void loadInitialData(BuildContext context) {    VehicleTrakingDetailsPrams prams = getArguments(context);    // bloc.fetchVehicleTracingDetails(    //     prams: VehicleTrakingDetailsPrams(    //   vehicleId: 33,    //   isVehicleHandover: true,    //   vehicleHandoverId: 169,    // ));    bloc.fetchVehicleTracingDetails(prams: prams);  }  @override  Widget build(BuildContext context) {    return mainFrame(      body: Stack(        children: [          buildConsumer(context),          Positioned(            top: 10,            left: 20,            child: InkWell(              onTap: () {                Navigator.pop(context);              },              child: CircleAvatar(                radius: 15,                backgroundColor: Colors.white,                child: Icon(                  Icons.close,                  color: Colors.black,                ),              ),            ),          ),          Positioned(            top: 40,            left: 20,            right: 20,            child: filterWidget(context),          ),        ],      ),    );  }  @override  Widget buildWidget(      BuildContext context, Initialized<VehicleTrackingEntity> state) {    return VehiclesTrackingScreen(vehicleTracingDetails: state.data);  }  SizedBox filterWidget(context) {    return SizedBox(        height: 60,        child: Row(          mainAxisSize: MainAxisSize.min,          mainAxisAlignment: MainAxisAlignment.center,          crossAxisAlignment: CrossAxisAlignment.center,          children: [            Expanded(              child: DateTimeTextFieldPicker(                hintText: strings.from,                inaialValue: fromDate,                onTap: (value) {                  fromDate = value;                  if (fromDate!.isEmpty || toDate!.isEmpty) {                    showErrorDialog(strings.select_date_from_to, context);                  } else {                    VehicleTrakingDetailsPrams prams = getArguments(context);                    prams.endShiftDateTime = toDate;                    prams.startShiftDateTime = value;                    bloc.fetchVehicleTracingDetails(prams: prams);                  }                },              ),            ),            SizedBox(              width: 5,            ),            Expanded(              child: DateTimeTextFieldPicker(                hintText: strings.too,                inaialValue: toDate,                onTap: (value) {                  toDate = value;                  if (fromDate!.isEmpty || toDate!.isEmpty) {                    showErrorDialog(strings.select_date_from_to, context);                  } else {                    VehicleTrakingDetailsPrams prams = getArguments(context);                    prams.endShiftDateTime = value;                    prams.startShiftDateTime = fromDate;                    bloc.fetchVehicleTracingDetails(prams: prams);                    bloc.fetchVehicleTracingDetails(prams: prams);                  }                },              ),            ),          ],        ));  }}