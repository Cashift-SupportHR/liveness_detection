import '../../../../../../shared/components/index.dart';import '../../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../data/models/add_vehicle_camera_params.dart';import '../../../../domain/entities/index.dart';class AddVehicleCameraScreen extends BaseStatelessWidget {  final VehicleCamera? initialData;  final Function(AddVehicleCameraParams) onAddEdit;  AddVehicleCameraScreen({    Key? key,    required this.initialData,    required this.onAddEdit,  }) : super(key: key);  final _formKey = GlobalKey<FormState>();  TextEditingController nameArController = TextEditingController();  TextEditingController nameEnController = TextEditingController();  TextEditingController codeController = TextEditingController();  @override  Widget build(BuildContext context) {    _initData();    return Form(      key: _formKey,      child: SingleChildScrollView(        padding: const EdgeInsets.all(16),        child: Column(          crossAxisAlignment: CrossAxisAlignment.start,          mainAxisAlignment: MainAxisAlignment.start,          children: [            cameraNameArTextField(context),            cameraNameEnTextField(context),            cameraCodeField(context),            rowButtons(context),          ],        ),      ),    );  }  BuildTextFieldItem cameraNameArTextField(BuildContext context) {    return BuildTextFieldItem(      title: strings.camera_name_ar,      hintText: strings.type_camera_name_ar,      controller: nameArController,      keyboardType: TextInputType.text,    );  }  BuildTextFieldItem cameraNameEnTextField(BuildContext context) {    return BuildTextFieldItem(      title: strings.camera_name_en,      hintText: strings.type_camera_name_en,      controller: nameEnController,      keyboardType: TextInputType.text,    );  }  BuildTextFieldItem cameraCodeField(BuildContext context) {    return BuildTextFieldItem(      title: strings.camera_code,      hintText: strings.type_camera_code,      controller: codeController,      keyboardType: TextInputType.text,    );  }  RowButtons rowButtons(BuildContext context) {    return RowButtons(      onSave: () {        if (_formKey.currentState!.validate()) {          onAddComplaintPressed();        }      },      margin: const EdgeInsets.only(top: 16),      onCancel: () {        Navigator.pop(context);      },    );  }  _initData() {    if (initialData != null) {      nameArController.text = initialData?.cameraNameEn ?? '';      nameEnController.text = initialData?.cameraNameEn ?? '';      codeController.text = initialData?.cameraIndexCode ?? '';    }  }  onAddComplaintPressed() {    onAddEdit(      AddVehicleCameraParams(        id: initialData?.id,        vehicleId: initialData?.vehicleId,        cameraIndexCode: codeController.text,        cameraNameAr: nameArController.text,        cameraNameEn: nameEnController.text,      ),    );  }}