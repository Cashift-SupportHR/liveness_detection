import 'package:get/get.dart';import 'package:shiftapp/domain/entities/shared/date_formatter.dart';import 'package:shiftapp/extensions/extensions.dart';import 'package:shiftapp/presentation/presentationUser/common/common_state.dart';import 'package:shiftapp/presentation/shared/components/camera_streaming/hls_player_widget.dart';import 'package:shiftapp/presentation/shared/components/index.dart';import '../../../../../../presentationUser/common/stream_data_state.dart';import '../../../../../../shared/components/text_field/date_time_text_fields.dart';import '../../../../data/models/vehicle_video_params.dart';import '../../../../domain/entities/camera_search_result_args.dart';import '../../../../domain/entities/camera_search_results.dart';import '../widgets/camera_search_results_placeholder.dart';import '../widgets/tabs_switch_camera_search_results.dart';import '../widgets/vehicle_info_camera_search_results.dart';import '../widgets/video_web_view.dart';class CameraSearchResultsScreen extends BaseStatelessWidget {  final StreamDataStateInitial<CameraSearchResults> dataStream;  final CameraSearchResultArgs args;  final Function(VehicleVideoParams) onFilter;  CameraSearchResultsScreen({    super.key,    required this.dataStream,    required this.args,    required this.onFilter,  });  TextEditingController startDateController = TextEditingController();  StreamStateInitial<bool> isVideoStream = StreamStateInitial();  VehicleVideoParams vehicleVideoParams = VehicleVideoParams();  TextEditingController controllerDateFrom = TextEditingController();  TextEditingController controllerTimeFrom = TextEditingController();  @override  Widget build(BuildContext context) {    _initDate();    return SingleChildScrollView(      child: Column(children: [vehicleData(), tabsSwitch(), videoDetails()]),    );  }  _initDate() {    vehicleVideoParams = args.vehicleVideoParams;    _initDateTimeData();  }  _initDateTimeData() {    print('vehicleVideoParams.beginTime: ${vehicleVideoParams.beginTime}');    controllerDateFrom.text = DateFormatter.repairApiDateTime(      vehicleVideoParams.beginTime ?? '',      pattern: DateFormatter.DAY_MONTH_YEAR,      local: 'en',    );    controllerTimeFrom.text = DateFormatter.repairApiDateTime(      vehicleVideoParams.beginTime ?? '',      pattern: DateFormatter.HOUR_MINUT_12,      local: 'en',    );  }  VehicleInfoCameraSearchResults vehicleData() {    return VehicleInfoCameraSearchResults(      args: args,      vehicleCameras: args.vehicleCameras,      onSelectItem: (Item item) {        vehicleVideoParams.cameraIndexCode = item.idString;        vehicleVideoParams.isVideoStream = isVideoStream.data ?? false;        onFilterPressed();      },    );  }  TabsSwitchCameraSearchResults tabsSwitch() {    return TabsSwitchCameraSearchResults(     vehicleVideoParams: vehicleVideoParams,      onTap: (int  id) {        vehicleVideoParams.isVideoStream = id == 1;        isVideoStream.setData(vehicleVideoParams.isVideoStream ?? false);        onFilterPressed();      },    );  }  StreamBuilder<bool?> buildDateTimePicker() {    return StreamBuilder<bool?>(      initialData: vehicleVideoParams.isVideoStream,      stream: isVideoStream.stream,      builder: (context, snapshot) {        bool isLive = snapshot.data ?? false;        return isLive            ? const SizedBox.shrink()            : Container(              padding: const EdgeInsets.symmetric(vertical: 14, horizontal: 12),              margin: const EdgeInsets.only(bottom: 10, left: 10, right: 10),              decoration: Decorations.boxDecorationBorder(                color: Colors.transparent,              ),              child: StreamBuilder(                stream: dataStream.stream,                builder: (context, snapshot) {                  return buildDateTimeTextFields();                },              ),            );      },    );  }  DateTimeTextFields buildDateTimeTextFields() {    return DateTimeTextFields(      controllerDateFrom: controllerDateFrom,      controllerTimeFrom: controllerTimeFrom,      onDateTimeChanged: (String dateTime) {        vehicleVideoParams.beginTime = dateTime;        onFilterPressed();      },    );  }  IntrinsicHeight videoDetails() {    return IntrinsicHeight(      child: StreamDataStateWidget(        stream: dataStream,        builder: (context, data) {          bool isLive = vehicleVideoParams.isVideoStream == true;          print(' isLive: $isLive');          // if the video stream is live, we don't need to check if the data is valid because the live stream is local and get from CameraSearchResults entity          return (data.isValidValid || isLive)              ? Column(                children: [                  buildDateTimePicker(),                  Container(                    height: isLive ? 600 : 300,                    width: double.infinity,                    clipBehavior: Clip.hardEdge,                    padding: const EdgeInsets.all(2),                    margin: const EdgeInsets.symmetric(                      horizontal: 10,                      vertical: 8,                    ),                    decoration: Decorations.shapeDecorationShadow(),                    child: isLive                        ? WebVideoViewWidget(                      pageUrl: data.getVideoStream(                        args.initialCamera?.id ?? 0,                        vehicleVideoParams.cameraIndexCode ?? '',                      ),                    )                        : HLSPlayerWidget(                      url: data.url ?? '',                      onTenSecondsRemaining: () {                        print(                          'Ten seconds remaining for video: ${data.url}',                        );                        onFetchAnotherVideo();                      },                    ),                  ),                ],              )              : CameraSearchResultsPlaceholder(                params: vehicleVideoParams,                onFilter: (VehicleVideoParams vehicleVideoParams) {                  this.vehicleVideoParams = vehicleVideoParams;                  onFilterPressed();                },              );        },      ),    );  }  onFilterPressed() {    if (vehicleVideoParams.isVideoStream == true) {      onFilter(vehicleVideoParams);    } else {      if (vehicleVideoParams.beginTime.isNotNullOrEmpty()) {        _initDateTimeData();        onFilter(vehicleVideoParams);      } else {        dataStream.setData(CameraSearchResults());      }    }  }  onFetchAnotherVideo() {    vehicleVideoParams.beginTime = DateFormatter.plusOneMinute(      vehicleVideoParams.beginTime ?? '',    );    onFilterPressed();  }}