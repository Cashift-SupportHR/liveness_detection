import 'package:get/get.dart';import 'package:shiftapp/domain/entities/shared/date_formatter.dart';import 'package:shiftapp/extensions/extensions.dart';import 'package:shiftapp/presentation/adminFeatures/vehicles/presentation/vehicleCameras/cameraSearchResults/widgets/video_web_view.dart';import 'package:shiftapp/presentation/presentationUser/common/common_state.dart';import 'package:shiftapp/presentation/shared/components/camera_streaming/hls_player_widget.dart';import 'package:shiftapp/presentation/shared/components/index.dart';import '../../../../../../presentationUser/common/stream_data_state.dart';import '../../../../../../shared/components/text_field/date_time_text_fields.dart';import '../../../../data/models/vehicle_video_params.dart';import '../../../../domain/entities/camera_search_result_args.dart';import '../../../../domain/entities/camera_search_results.dart';import '../widgets/camera_search_results_placeholder.dart';import '../widgets/tabs_switch_camera_search_results.dart';import '../widgets/vehicle_info_camera_search_results.dart';class CameraSearchResultsScreen extends BaseStatelessWidget {  final StreamDataStateInitial<CameraSearchResults> dataStream;  final CameraSearchResultArgs args;  final Function(VehicleVideoParams) onFilter;  CameraSearchResultsScreen({    super.key,    required this.dataStream,    required this.args,    required this.onFilter,  });  TextEditingController startDateController = TextEditingController();  StreamStateInitial<bool> isVideoStream = StreamStateInitial();  VehicleVideoParams vehicleVideoParams = VehicleVideoParams();  TextEditingController controllerDateFrom = TextEditingController();  TextEditingController controllerTimeFrom = TextEditingController();  StreamDataStateInitial<String> streamNextVideoUrl =      StreamDataStateInitial<String>();  @override  Widget build(BuildContext context) {    _initDate();    return SingleChildScrollView(      child: Column(children: [vehicleData(), tabsSwitch(), videoDetails()]),    );  }  _initDate() {    vehicleVideoParams = args.vehicleVideoParams;    _initDateTimeData();  }  _initDateTimeData() {    print('vehicleVideoParams.beginTime: ${vehicleVideoParams.beginTime}');    controllerDateFrom.text = DateFormatter.repairApiDateTime(      vehicleVideoParams.beginTime ?? '',      pattern: DateFormatter.DAY_MONTH_YEAR,      local: 'en',    );    controllerTimeFrom.text = DateFormatter.repairApiDateTime(      vehicleVideoParams.beginTime ?? '',      pattern: DateFormatter.HOUR_MINUT_12,      local: 'en',    );  }  VehicleInfoCameraSearchResults vehicleData() {    return VehicleInfoCameraSearchResults(      args: args,      vehicleCameras: args.vehicleCameras,      onSelectItem: (Item item) {        args.initialCamera = args.vehicleCameras.firstWhere(          (camera) => camera.id == item.idString,          orElse: () => args.vehicleCameras.first,        );        vehicleVideoParams.cameraIndexCode = item.idString;        vehicleVideoParams.isVideoStream = isVideoStream.data ?? false;        onFilterPressed();      },    );  }  TabsSwitchCameraSearchResults tabsSwitch() {    return TabsSwitchCameraSearchResults(      vehicleVideoParams: vehicleVideoParams,      onTap: (int id) {        dataStream.data = CameraSearchResults();        vehicleVideoParams.isFirstMinute = true;        vehicleVideoParams.isVideoStream = id == 1;        isVideoStream.setData(vehicleVideoParams.isVideoStream ?? false);        onFilterPressed();      },    );  }  Container buildDateTimePicker() {    return Container(      padding: const EdgeInsets.symmetric(vertical: 14, horizontal: 12),      margin: const EdgeInsets.only(bottom: 10, left: 10, right: 10),      decoration: Decorations.boxDecorationBorder(color: Colors.transparent),      child: StreamBuilder(        stream: dataStream.stream,        builder: (context, snapshot) {          return buildDateTimeTextFields();        },      ),    );  }  DateTimeTextFields buildDateTimeTextFields() {    return DateTimeTextFields(      controllerDateFrom: controllerDateFrom,      controllerTimeFrom: controllerTimeFrom,      onDateTimeChanged: (String dateTime) {        if (controllerDateFrom.text.isNotEmpty &&            controllerTimeFrom.text.isNotEmpty) {          vehicleVideoParams.isFirstMinute = true;          vehicleVideoParams.beginTime = dateTime;          onFilterPressed();        }      },    );  }  IntrinsicHeight videoDetails() {    return IntrinsicHeight(      child: StreamBuilder<bool>(        initialData: vehicleVideoParams.isVideoStream,        stream: isVideoStream.stream,        builder: (context, snapshot) {          bool isLive = vehicleVideoParams.isVideoStream == true;          print(' isLive: $isLive');          return Column(            children: [              if (!isLive) buildDateTimePicker(),              StreamDataStateWidget(                stream: dataStream,                onReload: () {                  onFilterPressed();                },                builder: (context, data) {                  streamNextVideoUrl.setData(data.url ?? '');                  return (data.isValidValid || isLive)                      ? Container(                        height: (isLive && !data.isValidValid) ? 600 : 250,                        width: double.infinity,                        clipBehavior: Clip.hardEdge,                        padding: const EdgeInsets.all(2),                        margin: const EdgeInsets.symmetric(                          horizontal: 10,                          vertical: 8,                        ),                        decoration: Decorations.shapeDecorationShadow(),                        child: (isLive && !data.isValidValid) ? WebVideoViewWidget(                          pageUrl: data.getVideoStream(                            args.initialCamera?.id ?? 0,                            vehicleVideoParams.cameraIndexCode ?? '',                          ) ):                        HLSPlayerWidget(                          url: data.url ?? '',                          streamNextVideoUrl: streamNextVideoUrl,                          isLive: isLive,                          onTenSecondsRemaining: () {                            vehicleVideoParams.isFirstMinute = false;                            onFetchAnotherVideo();                          },                        ),                      )                      : CameraSearchResultsPlaceholder(                        params: vehicleVideoParams,                        onRefresh: () {                          onFilterPressed();                        },                      );                },              ),            ],          );        },      ),    );  }  onFilterPressed() {    if (vehicleVideoParams.isVideoStream == true) {      onFilter(vehicleVideoParams);    } else {      print('vehicleVideoParams.beginTime: ${vehicleVideoParams.beginTime}');      if (vehicleVideoParams.beginTime.isNotNullOrEmpty()) {        _initDateTimeData();        onFilter(vehicleVideoParams);      } else {        dataStream.setData(CameraSearchResults());      }    }  }  onFetchAnotherVideo() {    if (vehicleVideoParams.isVideoStream != true) {      vehicleVideoParams.beginTime = DateFormatter.plusOneMinute(        vehicleVideoParams.beginTime ?? '',      );    } else {      vehicleVideoParams.beginTime = null; // Reset beginTime for live stream    }    onFilterPressed();  }}