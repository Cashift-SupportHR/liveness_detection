import 'package:get/get.dart';import 'package:shiftapp/domain/entities/shared/date_formatter.dart';import 'package:shiftapp/extensions/extensions.dart';import 'package:shiftapp/presentation/presentationUser/common/common_state.dart';import 'package:shiftapp/presentation/presentationUser/resources/colors.dart';import 'package:shiftapp/presentation/shared/components/camera_streaming/hls_player_widget.dart';import 'package:shiftapp/presentation/shared/components/index.dart';import '../../../../../../../utils/app_icons.dart';import '../../../../../../presentationUser/common/stream_data_state.dart';import '../../../../../../presentationUser/resources/constants.dart';import '../../../../data/models/vehicle_video_params.dart';import '../../../../domain/entities/camera_search_result_args.dart';import '../../../../domain/entities/camera_search_results.dart';import '../../../../domain/entities/vehicle_camera.dart';import '../../view/widgets/search_vehicle_caamera_sheet.dart';import '../widgets/camera_search_results_placeholder.dart';class CameraSearchResultsScreen extends BaseStatelessWidget {  final StreamDataStateInitial<CameraSearchResults> dataStream;  final CameraSearchResultArgs args;  final Function(VehicleVideoParams) onFilter;  CameraSearchResultsScreen(      {super.key,      required this.dataStream,      required this.args,      required this.onFilter});  TextEditingController startDateController = TextEditingController();  TextEditingController endDateController = TextEditingController();  StreamStateInitial<bool> isVideoStream = StreamStateInitial();  VehicleVideoParams vehicleVideoParams = VehicleVideoParams();  @override  Widget build(BuildContext context) {    _initDate();    return SingleChildScrollView(child: Column(      children: [        vehicleData(),        tabsSwitch(),        videoDetails(),      ],    ));  }  _initDate() {    vehicleVideoParams = args.vehicleVideoParams;    startDateController.text = vehicleVideoParams.beginTime ?? '';    endDateController.text = vehicleVideoParams.endTime ?? '';  }  Container vehicleData() {    // TextStyle titleStyle = kTextMedium.copyWith(color: kGray_79, fontSize: 12);    TextStyle valueStyle = kTextMedium.copyWith(color: kBlack, fontSize: 12);    return Container(      margin: EdgeInsets.all(10),      padding: EdgeInsets.only(top: 15, right: 15, left: 15),      decoration: Decorations.shapeDecorationShadow(),      child: Column(        children: [          IconDoubleText(            name: strings.vehicle_number + ': ',            value: args.vehicle.plateNumber ?? '',            icon: AppIcons.vehicle_number,            nameStyle: kTextMedium.copyWith(fontSize: 14, color: kPrimary),            valueStyle: valueStyle,            padding: EdgeInsets.only(bottom: 15),          ),          BottomSheetTextFieldRectangle(            title: strings.camera,            hintText: strings.select_camera,            iconTitle: AppIcons.camera_vehicle,            items: VehicleCamera.toItems(args.vehicleCameras),            initValue: args.initialCamera?.fullName,            onSelectItem: (Item item) {              vehicleVideoParams.cameraIndexCode = item.idString;              vehicleVideoParams.isVideoStream = isVideoStream.data ?? false;              onFilterPressed();            },          ),        ],      ),    );  }  SizedBox tabsSwitch() {    return SizedBox(      height: 80,      child: DynamicTabBarView(        tabs: [          DynamicItem(            id: 0,            name: strings.videos,          ),          DynamicItem(            id: 1,            name: strings.live_streaming,          ),        ],        isSeparate: true,        initialIndex: vehicleVideoParams.isVideoStream == true ? 1 : 0,        padding: EdgeInsets.symmetric(vertical: 10),        marginTabs: EdgeInsets.symmetric(horizontal: 10),        onTap: (id) {          vehicleVideoParams.isVideoStream = id == 1;          isVideoStream.setData(id == 1);          print('onTap ${id}');          if (id == 0 &&              vehicleVideoParams.beginTime.isNotNullOrEmpty() &&              vehicleVideoParams.endTime.isNotNullOrEmpty()) {            onFilterPressed();          } else if (id == 1) {            onFilterPressed();          } else {            dataStream.setData(CameraSearchResults());          }        },      ),    );  }  StreamBuilder<bool?> rangDates() {    return StreamBuilder<bool?>(      initialData: vehicleVideoParams.isVideoStream,      stream: isVideoStream.stream,      builder: (context, snapshot) {        bool isLive = snapshot.data ?? false;        return isLive            ? const SizedBox.shrink()            : Container(                padding:                    const EdgeInsets.symmetric(vertical: 14, horizontal: 12),                margin: const EdgeInsets.only(bottom: 10, left: 10, right: 10),                decoration:                    Decorations.boxDecorationBorder(color: Colors.transparent),                child: Row(                  children: [                    StreamBuilder(                        stream: dataStream.stream,                        builder: (context, snapshot) {                          return SizedBox(                              child: Column(                            crossAxisAlignment: CrossAxisAlignment.start,                            children: [                              rowDate(                                strings.from,                                vehicleVideoParams.beginTime ?? '',                              ),                              const SizedBox(height: 5),                              rowDate(                                strings.too,                                vehicleVideoParams.endTime ?? '',                              ),                            ],                          ));                        }),                    const SizedBox(width: 10),                    Expanded(                      child: AppCupertinoButton(                        radius: BorderRadius.circular(5),                        text: strings.edit_date_time,                        textStyle:                            kTextSemiBold.copyWith(color: kWhite, fontSize: 16),                        onPressed: () {                          showRangDateFilterBottomSheet(                            context,                            params: vehicleVideoParams,                          );                        },                      ),                    ),                  ],                ),              );      },    );  }  Row rowDate(String title, String value) {    return Row(      children: [        Text(          title,          style: kTextMedium.copyWith(color: kOrange00, fontSize: 12),        ),        const SizedBox(width: 5),        kLoadSvgInCirclePath(          AppIcons.calendarOutline,          height: 16,          width: 16,        ),        const SizedBox(width: 5),        Text(          DateFormatter.formatTimeStamp(            value,            apiPattern: DateFormatter.TIME_STAMP,            pattern: DateFormatter.DATE_TIME_UI_2,            local: Get.locale?.languageCode ?? 'en',          ),          style: kTextMedium.copyWith(color: kBlack, fontSize: 12),        ),      ],    );  }  IntrinsicHeight videoDetails() {    return IntrinsicHeight(        child: StreamDataStateWidget(            stream: dataStream,            builder: (context, data) {              return data.isValidValid                  ? Column(                      children: [                        rangDates(),                        Container(                          height: 400,                          width: double.infinity,                            padding: const EdgeInsets.all(16),                            margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 8),                            decoration: Decorations.shapeDecorationShadow(),                            child: StreamDataStateWidget(                                stream: dataStream,                                builder: (context, data) {                                  return HLSPlayerWidget(                                      url: data.videoUrl ?? '');                                }),                        ),                      ],                    )                  : CameraSearchResultsPlaceholder(                      params: vehicleVideoParams,                      onFilter: onFilter,                    );            }));  }  void showRangDateFilterBottomSheet(BuildContext context,      {required VehicleVideoParams params}) {    SearchVehicleCameraSheet.show(      context,      params: params,      onSearch: (VehicleVideoParams params) {        vehicleVideoParams = params;        onFilter(          params,        );      },    );  }  onFilterPressed() {    if (vehicleVideoParams.isVideoStream == true) {      onFilter(vehicleVideoParams);    } else {      if (vehicleVideoParams.beginTime.isNotNullOrEmpty() &&          vehicleVideoParams.endTime.isNotNullOrEmpty()) {        onFilter(vehicleVideoParams);      } else {        dataStream.setData(CameraSearchResults());      }    }  }}