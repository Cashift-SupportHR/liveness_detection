import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/presentation/adminFeatures/vehicles/data/models/index.dart';import 'package:shiftapp/presentation/presentationUser/common/stream_data_state.dart';import '../../../../../../presentationUser/common/common_state.dart'    show StreamStateInitial;import '../../../../../../../core/resources/data_state.dart';import '../../../../domain/entities/camera_search_result_args.dart';import '../../../../domain/entities/camera_search_results.dart';import '../../../../domain/entities/vehicle_location.dart';@Injectable()class CameraSearchResultsCubit extends BaseCubit {  final VehiclesRepository _repository;  CameraSearchResultsCubit(this._repository);  // StreamDataStateInitial<CameraSearchResults> cameraSearchResultsStream =  //     StreamDataStateInitial<CameraSearchResults>();  // Future<void> fetchVehicleCameras(CameraSearchResultArgs args) async {  //     try {  //       if (args.vehicleVideoParams.isFirstMinute == true) {  //         cameraSearchResultsStream.start();  //       }  //       final data = await _repository.fetchVehicleVideo(  //         args.vehicleVideoParams,  //       );  //       cameraSearchResultsStream.setData(data);  //     } catch (e) {  //       cameraSearchResultsStream.setError(e);  //     }  // }  final StreamDataStateInitial<CameraSearchResults> cameraSearchResultsStream =  StreamDataStateInitial<CameraSearchResults>();  int _lastRequestId = 0;  // this is used to ignore results from previous requests when a new request is made  StreamDataStateInitial<CameraSearchResults>  otherMinuteCameraSearchResultsStream =      StreamDataStateInitial<CameraSearchResults>();  StreamStateInitial<VehicleLocation> vehicleLocationStream =      StreamStateInitial();    Future<void> fetchVehicleCameras(CameraSearchResultArgs args) async {    final requestId = ++_lastRequestId;      // bump on every call    print('fetchVehicleCameras requestId: ${args.vehicleVideoParams.isFirstMinute} $requestId');    if (args.vehicleVideoParams.isFirstMinute == true) {      cameraSearchResultsStream.start();    }    try {      final data = await _repository.fetchVehicleVideo(        args.vehicleVideoParams,      );      if (requestId != _lastRequestId) return;  // ignore if superseded      cameraSearchResultsStream.setData(data);    } catch (e) {      if (requestId != _lastRequestId) return;  // ignore if superseded      cameraSearchResultsStream.setError(e);    }    try {      if (args.vehicleVideoParams.isFirstMinute == true) {        cameraSearchResultsStream.start();      }      // args.vehicleVideoParams.cameraIndexCode = '69';      final data = await _repository.fetchVehicleVideo(args.vehicleVideoParams);      cameraSearchResultsStream.setData(data);    } catch (e) {      cameraSearchResultsStream.setError(e);    }  }  Future<void> fetchVehicleLocation(String cameraIndexCode) async {    try {      // args.vehicleVideoParams.cameraIndexCode = '69';      final data = await _repository.fetchVehicleLocation(cameraIndexCode);      vehicleLocationStream.setData(data);    } catch (e) {      vehicleLocationStream.setError(e);    }  }  void deleteVehicleCamera(int id) {    executeEmitterListener(() => _repository.deleteVehicleCamera(id));  }}