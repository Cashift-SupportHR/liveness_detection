import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/presentation/adminFeatures/vehicles/data/models/index.dart';import 'package:shiftapp/presentation/presentationUser/common/stream_data_state.dart';import '../../../../domain/entities/camera_search_result_args.dart';import '../../../../domain/entities/camera_search_results.dart';@Injectable()class CameraSearchResultsCubit extends BaseCubit {  final VehiclesRepository _repository;  CameraSearchResultsCubit(this._repository);  StreamDataStateInitial<CameraSearchResults> cameraSearchResultsStream =      StreamDataStateInitial<CameraSearchResults>();  Future<void> fetchVehicleCameras(CameraSearchResultArgs args) async {    if (args.vehicleVideoParams.isVideoStream == false) {      try {        cameraSearchResultsStream.start();        final data = await _repository.fetchVehicleVideo(          args.vehicleVideoParams,        );        cameraSearchResultsStream.setData(data);      } catch (e) {        cameraSearchResultsStream.setError(e);      }    } else {      // if is stream;  we don't need to call api because the link si generated local from CameraSearchResults entity      cameraSearchResultsStream.setData(        CameraSearchResults(          cameraName: args.initialCamera?.fullName,          vehiclePlatNo: args.vehicle.plateNumber ?? '',        ),      );    }  }  void deleteVehicleCamera(int id) {    executeEmitterListener(() => _repository.deleteVehicleCamera(id));  }}