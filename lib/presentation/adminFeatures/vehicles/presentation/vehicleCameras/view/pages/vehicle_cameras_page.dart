import 'package:flutter/cupertino.dart';import 'package:shiftapp/presentation/shared/components/base_widget_bloc.dart';import '../../../../../../../../core/services/routes.dart';import '../../../../../../presentationUser/common/common_state.dart';import '../../../../../../presentationUser/salarydefinitionrequest/requests/widgets/title_and_add_new_request.dart';import '../../../../../../shared/components/helper_widgets.dart';import '../../../../data/models/vehicle_video_params.dart';import '../../../../domain/entities/camera_search_result_args.dart';import '../../../../domain/entities/vehicle.dart';import '../../../../domain/entities/vehicle_camera.dart';import '../bloc/vehicle_cameras_cubit.dart';import '../intent/vehicle_cameras_intents.dart';import '../widgets/search_vehicle_caamera_sheet.dart';import 'vehicle_cameras_screen.dart';class VehicleCamerasPage extends BaseBlocWidget<    Initialized<List<VehicleCamera>>, VehicleCamerasCubit> {  VehicleCamerasPage({Key? key}) : super(key: key);  @override  String? title(BuildContext context) {    return strings.cameras;  }  Vehicle vehicleArgs = Vehicle();  @override  loadInitialData(BuildContext context) {    vehicleArgs = getArguments(context);    bloc.fetchVehicleCameras(vehicleArgs.id ?? 0);  }  @override  bool detectRequiredTasks() {    return false;  }  TextEditingController controller = TextEditingController();  @override  Widget build(BuildContext context) {    return mainFrame(      body: Column(        children: [          TitleAndAddNewRequest(            title: strings.view_cameras,            textButton: strings.add_camera,            onTap: () async {              final isRefresh = await Navigator.pushNamed(                  context, Routes.addVehicleCameraPage,                  arguments: VehicleCamera(                    vehicleId: vehicleArgs.id,                  ));              if (isRefresh == true) {                loadInitialData(context);              }            },          ),          Expanded(child: buildConsumer(context)),        ],      ),    );  }  List<VehicleCamera> vehicleCameras = [];  @override  Widget buildWidget(      BuildContext context, Initialized<List<VehicleCamera>> state) {    vehicleCameras = state.data;    return VehicleCamerasScreen(      data: state.data,      onActionIntent: (VehicleCamerasIntents intent) {        onActionIntentHandler(intent);      },    );  }  @override  void onSuccessDismissed() {    loadInitialData(context);  }  onActionIntentHandler(VehicleCamerasIntents intent) async {    if (intent is EditVehicleCamera) {      final isRefresh = await Navigator.pushNamed(        context,        Routes.addVehicleCameraPage,        arguments: intent.data,      );      if (isRefresh == true) {        loadInitialData(context);      }    } else if (intent is DeleteVehicleCamera) {      bloc.deleteVehicleCamera(intent.id);    } else if (intent is SearchVehicleCamera) {      if (intent.isVideoStream == true) {        Navigator.pushNamed(          context,          Routes.cameraSearchResultsPage,          arguments: CameraSearchResultArgs(            vehicleCameras: vehicleCameras,            vehicleVideoParams: VehicleVideoParams(              cameraIndexCode: intent.item.cameraIndexCode,              isVideoStream: true,              vehicleId: vehicleArgs.id,            ),            vehicle: vehicleArgs,            initialCamera: intent.item,          ),        );      } else {        startVideo(context, intent: intent);      }    }  }  void startVideo(BuildContext context, {required SearchVehicleCamera intent}) {    VehicleVideoParams params = VehicleVideoParams(      cameraIndexCode: intent.item.cameraIndexCode,      isVideoStream: false,      vehicleId: intent.item.vehicleId,    );    showAppModalBottomSheet(      context: context,      title: strings.start_video,      isScrollControlled: false,      child: SearchVehicleCameraSheet(        params: params,        onSearch: (VehicleVideoParams newParams) {          params = newParams;          Navigator.pushNamed(            context,            Routes.cameraSearchResultsPage,            arguments: CameraSearchResultArgs(              vehicleCameras: vehicleCameras,              vehicle: vehicleArgs,              initialCamera: intent.item,              vehicleVideoParams: params,            ),          );        },      ),    );  }}