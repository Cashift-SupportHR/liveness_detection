import 'package:injectable/injectable.dart';import 'package:livelyness_detection/index.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/presentation/presentationUser/common/common_state.dart';import '../../../../data/models/index.dart';import '../../../../domain/entities/vehicle_violation.dart';import 'add_vehicle_violation_state.dart';@Injectable()class AddVehicleViolationCubit extends BaseCubit {  final VehiclesRepository _repository;  AddVehicleViolationCubit(this._repository);  void fetchInitialData(int? id) async {    executeBuilder(() => _repository.fetchVehicleViolationTypes(),        onSuccess: (vehicleViolationTypes) async {      ContractViolation? initialData;      if (id != null) {        initialData = await _repository.fetchVehicleViolationsById(id);      }      emit(Initialized<AddVehicleViolationState>(          data: AddVehicleViolationState(        vehicleViolationTypes: vehicleViolationTypes,        initialData: initialData,      )));    });  }  void addVehicleViolation(AddVehicleViolationParams params,      {required List<File> files}) {    executeListener(() => _repository.addContractViolation(params),        onSuccess: (data) async {    if (data.payload.id != null && files.isNotEmpty) {      await _repository.addContractViolationAttachments(            AddVehicleViolationAttachmentParams(                id: data.payload.id ?? 0, files: files));    }      emit((SuccessStateListener(data: data.message.toString())));    });  }}