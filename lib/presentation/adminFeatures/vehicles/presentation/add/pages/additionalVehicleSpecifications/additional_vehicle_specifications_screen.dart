import 'package:dio/dio.dart';import 'package:shiftapp/presentation/adminFeatures/vehicles/presentation/add/pages/additionalVehicleSpecifications/widgets/vehicle_image_item.dart';import 'package:shiftapp/presentation/shared/components/index.dart';import '../../../../../../presentationUser/resources/colors.dart';import '../../../../domain/entities/vehicle_image_face.dart';class AdditionalVehicleSpecificationsScreen extends BaseStatelessWidget {  final List<VehicleImageFace> data;  final Function(List<MultipartFile>, List<VehicleImageFace>) onAddVehicle;  final Function()? onPrevious;  AdditionalVehicleSpecificationsScreen({    Key? key,    required this.data,    required this.onAddVehicle,    required this.onPrevious,  }) : super(key: key);  int colorId = 0;  List<MultipartFile> files = [];  final _formKey = GlobalKey<FormState>();  @override  Widget build(BuildContext context) {    files = List.generate(data.length, (index) => MultipartFile.fromBytes([]));    bool isEditImages = data.any((element) => element.imageFace?.startsWith('http') == false);    // _initialValues();    return Scaffold(      backgroundColor: kBackground,      bottomNavigationBar: RowButtons(        textSaveButton: strings.next,        textCancelButton: strings.previous,        onSave: () {          // This case is when the user return back to edit images, so he can next to the next page without select images again.          if (isEditImages) {            files.clear();            onAddProjectPressed(context);            return;          }          // check if all images are selected          if (!files.every((element) => element.length != 0)) {            onAddProjectPressed(context);          } else {            // SnackBarManager.showErrorSnackBar(context, strings.please_select_all_images);            showErrorDialog(strings.please_select_all_images, context);          }        },        onCancel: () {          onPrevious!();        },      ),      body: Container(        margin: const EdgeInsets.symmetric(horizontal: 8),        decoration: Decorations.boxDecorationBorder(color: kBackground),        child: GridView.builder(          itemCount: data.length,          padding: const EdgeInsets.all(10),          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(            crossAxisCount: 2,            crossAxisSpacing: 10,            mainAxisSpacing: 10,            mainAxisExtent: 160,          ),          itemBuilder: (context, index) {            return VehicleImageItem(              data: data[index],              onUploadImage: (value) {                data[index].imageFace = value.path;                MultipartFile file = MultipartFile.fromFileSync(value.path, filename: '${index}.${value.path.split('.').last}');                files[index] = file;              },            );          },        ),      ),    );  }  // _initialValues() {  // }  onAddProjectPressed(BuildContext context) {    onAddVehicle(files, data);  }}