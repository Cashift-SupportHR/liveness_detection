import 'dart:io';import 'package:shiftapp/domain/entities/shared/date_formatter.dart';import 'package:shiftapp/presentation/adminFeatures/vehicles/data/models/add_vehicle_params.dart';import 'package:shiftapp/presentation/shared/components/index.dart';import '../../../../../../presentationUser/resources/colors.dart';import '../../../../../../presentationUser/workHazards/presentation/addWorkHazard/widgets/upload_files_list.dart';import '../../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../../../shared/models/common_list_item.dart';import '../../../../domain/entities/index.dart';class VehiclePlateLicenseInfoScreen extends BaseStatelessWidget {  final List<CommonListItem> colors;  final VehicleDetails? initialData;  final Function(AddVehicleParams) onAddVehicle;  final Function()? onPrevious;  VehiclePlateLicenseInfoScreen({    Key? key,    required this.colors,    this.initialData,    required this.onAddVehicle,    this.onPrevious,  }) : super(key: key);  TextEditingController plateNumberController = TextEditingController();  TextEditingController vehicleCameraCodeController = TextEditingController();  TextEditingController licenseNumberController = TextEditingController();  TextEditingController licenseExpiryDateController = TextEditingController();  int colorId = 0;  File? file;  final _formKey = GlobalKey<FormState>();  @override  Widget build(BuildContext context) {    _initialValues();    return Scaffold(      backgroundColor: kBackground,      bottomNavigationBar: RowButtons(        textSaveButton:            getArguments(context) != null ? strings.save_button : strings.next,        textCancelButton: strings.previous,        onSave: () {          if (_formKey.currentState!.validate()) {            onAddProjectPressed(context);          }        },        onCancel: () {          onPrevious!();        },      ),      body: Form(          key: _formKey,          child: SingleChildScrollView(            padding: const EdgeInsets.all(16),            child: Column(              children: [                plateNumberTextField(),                mobileVehicleIndexCodeTextField(),                licenseNumberTextField(),                vehicleColorPicker(),                licenseExpiryDateTextField(),                uploadFilesList(),              ],            ),          )),    );  }  BuildTextFieldItem plateNumberTextField() {    return BuildTextFieldItem(      title: strings.plate_number,      hintText: strings.type_plate_number,      controller: plateNumberController,      keyboardType: TextInputType.text,    );  }  BuildTextFieldItem mobileVehicleIndexCodeTextField() {    return BuildTextFieldItem(      title: strings.vehicle_camera_code,      hintText: strings.vehicle_camera_code,      controller: vehicleCameraCodeController,      keyboardType: TextInputType.text,    );  }  BuildTextFieldItem licenseNumberTextField() {    return BuildTextFieldItem(      title: strings.license_number,      hintText: strings.type_license_number,      controller: licenseNumberController,    );  }  vehicleColorPicker() {    return BottomSheetTextFieldRectangle(      title: strings.vehicle_color,      hintText: strings.select_vehicle_color,      isScrollControlled: true,      setSearch: true,      initValue: initialData?.vehicleColorName ?? '',      items: CommonListItem.toItemsListPicker(colors),      onSelectItem: (items) async {        colorId = items.index;      },    );  }  DateTextFieldPicker licenseExpiryDateTextField() {    return DateTextFieldPicker(      title: strings.license_expiry_date,      hintText: strings.select_license_expiry_date,      controller: licenseExpiryDateController,      pattern: DateFormatter.DAY_MONTH_YEAR,    );  }  UploadFilesOnly uploadFilesList() {    return UploadFilesOnly(      initialValue: initialData?.licenseImage ?? '',      onPicker: (filesValue) {        file = filesValue;      },    );  }  _initialValues() {    print('initialData ${initialData?.licenseExpiryDate}');    if (initialData != null) {      plateNumberController.text = initialData?.plateNumber ?? '';      licenseNumberController.text = initialData?.licenseNumber ?? '';      vehicleCameraCodeController.text =          initialData?.mobileVehicleIndexCode ?? '';      colorId = initialData?.vehicleColorId ?? 0;      licenseExpiryDateController.text = DateFormatter.repairApiDateTime(        initialData?.licenseExpiryDate ?? '',        pattern: DateFormatter.DAY_MONTH_YEAR,        local: 'en',      );    }  }  onAddProjectPressed(BuildContext context) {    if (initialData == null && file == null) {      SnackBarManager.showErrorSnackBar(          context, strings.please_upload_pdf_image);      return;    } else {      onAddVehicle(AddVehicleParams(        plateNumber: plateNumberController.text,        licenseNumber: licenseNumberController.text,        vehicleColorId: colorId,        mobileVehicleIndexCode: vehicleCameraCodeController.text,        licenseExpiryDate:            DateFormatter.formatTimeStamp(licenseExpiryDateController.text),        vehicleImageFile: file,      ));    }  }}