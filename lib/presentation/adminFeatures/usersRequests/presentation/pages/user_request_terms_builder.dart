import 'package:shiftapp/presentation/shared/components/index.dart';import 'package:shiftapp/presentation/shared/models/common_list_item.dart';import 'package:shiftapp/utils/app_utils.dart';import '../../../../../domain/constants/codes_constants.dart';import '../../../../../utils/app_icons.dart';import '../../../../presentationUser/common/common_state.dart';import '../../../../presentationUser/resources/colors.dart';import '../../../../presentationUser/resources/constants.dart';import '../../data/models/reject_user_request_params.dart';import '../../data/models/user_request_terms_params.dart';import '../../domain/entities/user_request.dart';import '../bloc/user_request_terms_cubit.dart';import '../widgets/bottom_sheet_accept_user_request.dart';class UsersRequestsBuilder    extends        BaseBlocWidget<          Initialized<List<CommonListItem>>,          UserRequestTermsCubit        > {  final String codeTab;  final UserRequest userRequest;  final Function() onRefresh;  UsersRequestsBuilder({    Key? key,    required this.codeTab,    required this.userRequest,    required this.onRefresh,  }) : super(key: key);  static void show(    BuildContext context, {    required Function() onRefresh,    required UserRequest userRequest,    required String codeTab,  }) {    showModalBottomSheet(      context: context,      backgroundColor: kWhite,      clipBehavior: Clip.antiAlias,      isScrollControlled: true,      constraints: BoxConstraints(        maxHeight: MediaQuery.of(context).size.height * 0.8,      ),      builder: (context) {        return UsersRequestsBuilder(          codeTab: codeTab,          userRequest: userRequest,          onRefresh: onRefresh,        );      },    );  }  @override  bool detectRequiredTasks() {    return false;  }  @override  loadInitialData(BuildContext context) {    bloc.fetchUserRequestTerms(      UserRequestTermsParams(requestTypeCode: codeTab ?? ''),    );  }  @override  Widget build(BuildContext context) {    return mainFrame(      body: Padding(        padding: const EdgeInsets.all(16),        child: Stack(          alignment: AlignmentDirectional.center,          children: [            Column(              children: [header(), Expanded(child: buildConsumer(context))],            ),            closeButton(context),          ],        ),      ),    );  }  @override  Widget buildWidget(    BuildContext context,    Initialized<List<CommonListItem>> state,) {    return UserRequestTermsBottomSheet(      data: state.data ?? [],      onAccept: () {        Navigator.pop(context);        bloc.acceptRejectUserRequest(          RejectUserRequestParams(            statusId: CodesConstants.accepted,            id: userRequest.id,          ),        );      },    );  }  @override  void onSuccessDismissed() {    onRefresh();  }  Column header() {    return Column(      crossAxisAlignment: CrossAxisAlignment.center,      mainAxisAlignment: MainAxisAlignment.center,      children: [        kLoadSvgInCirclePath(AppIcons.warning_info),        SizedBox(height: 10),        Text(          strings.user_request_accept_title,          textAlign: TextAlign.center,          style: kTextBold.copyWith(fontSize: 16),        ),        SizedBox(height: 5),        Text(          strings.user_request_accept_subtitle_msg,          textAlign: TextAlign.center,          style: kTextRegular.copyWith(fontSize: 14),        ),      ],    );  }  Align closeButton(BuildContext context) {    return Align(      alignment: AlignmentDirectional.topEnd,      child: AppIconButton(        icon: AppIcons.removeCircle,        iconSize: 25,        onTap: () {          Navigator.of(context).pop();        },      ),    );  }}