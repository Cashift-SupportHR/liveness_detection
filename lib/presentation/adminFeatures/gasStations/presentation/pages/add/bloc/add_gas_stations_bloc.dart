import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/presentation/adminFeatures/gasStations/data/models/add_edit_gas_station_prams.dart';import '../../../../../../presentationUser/common/common_state.dart';import '../../../../../../shared/models/common_list_item.dart';import '../../../../../shared/domain/usecases/companies_usecase.dart';import '../../../../../shared/domain/usecases/projects_usecase.dart';import '../../../../../usersManagement/data/repositories/users_management_repository.dart';import '../../../../data/repositories/gas_stations_repository.dart';@Injectable()class AddGasStationsCubit extends BaseCubit {  final GasStationsRepository _repository;  final ProjectsUseCase projectsUseCase;  final CompaniesUseCase companiesUseCase;  final UsersManagementRepository usersRepository;  AddGasStationsCubit(    this._repository,    this.projectsUseCase,    this.companiesUseCase,    this.usersRepository,  );  void addEditGasStation(AddEditGasStationPrams params) {    executeEmitterListener(() => _repository.addEditGasStation(params)); //  }  StreamStateInitial<List<CommonListItem>?> projectsStream =      StreamStateInitial();  Future<void> fetchProjectsCompanyId(int companyId) async {    try {      final data = await usersRepository.fetchListProjectsByCompanyId(        companyId,      );      projectsStream.setData(data);    } catch (e) {      projectsStream.setError(e);    }  }  Future<void> fetchData() async {    emit(LoadingState());    try {      final company = await companiesUseCase.call();      emit(InitializedGasStations(companies: company));    } on Exception catch (e) {      emit(ErrorState(e));    }  }}