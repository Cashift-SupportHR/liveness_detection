import 'package:google_maps_flutter/google_maps_flutter.dart';import 'package:shiftapp/domain/entities/shared/date_formatter.dart';import 'package:shiftapp/presentation/adminFeatures/projectsManagement/presentation/addNewProject/pages/addProject/widgets/company_picker.dart';import 'package:shiftapp/presentation/shared/components/index.dart';import '../../../../../../../utils/app_icons.dart';import '../../../../../../presentationUser/common/common_state.dart';import '../../../../../../presentationUser/map_picker/widgets/map_picker_item.dart';import '../../../../../../presentationUser/resources/validation.dart';import '../../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../../../shared/models/common_list_item.dart';import '../../../../../projectsManagement/data/models/project_management_dto.dart';import '../../../../../usersManagement/domain/entities/company.dart';import '../../../../data/models/add_edit_gas_station_prams.dart';import '../../../../domain/entities/GasStation.dart';class AddGasStationsScreen extends BaseStatelessWidget {  final List<Company> company;  GasStation? gasStation;  final Function(AddEditGasStationPrams params) addEditGasStation;  final Function(int companyId) onFetchProject;  StreamStateInitial<List<CommonListItem>?> projectsStream;  AddGasStationsScreen({    required this.gasStation,    required this.company,    required this.onFetchProject,    required this.projectsStream,    required this.addEditGasStation,  });  final _formKey = GlobalKey<FormState>();  TextEditingController gasStationsArController = TextEditingController();  TextEditingController gasStationsEnController = TextEditingController();  TextEditingController mainLocationController = TextEditingController();  int? companyId;  int? projectId;  LatLng? mainLocation;  @override  Widget build(BuildContext context) {    gasStationsArController = TextEditingController(      text: gasStation?.stationNameAr ?? "",    );    gasStationsEnController = TextEditingController(      text: gasStation?.stationNameEn ?? "",    );    mainLocationController = TextEditingController(      text: "${gasStation?.latitude ?? ""} -  ${gasStation?.longtude ?? ""}",    );    companyId = gasStation?.companyId ?? 0;    projectId = gasStation?.projectId ?? 0;    mainLocation = LatLng(      gasStation?.latitude?.toDouble() ?? 0,      gasStation?.longtude?.toDouble() ?? 0,    );    return SingleChildScrollView(      child: Padding(        padding: const EdgeInsets.all(8.0),        child: Form(          key: _formKey,          child: Column(            children: [              CompanyProjectPicker(                items: company,                initialValue: gasStation?.companyName ?? "",                hintText: strings.select,                label: strings.company_name,                onSelectItem: (value) {                  companyId = value.index;                  onFetchProject(value.index);                },              ),              projectWidget(),              const SizedBox(height: 10),              BuildTextFieldItem(                title: strings.name_gas_stations,                keyboardType: TextInputType.name,                controller: gasStationsArController,                validator:                    (value) => Validation.validateArabicText(context, value),              ),              BuildTextFieldItem(                title: strings.name_en_gas_stations,                keyboardType: TextInputType.name,                controller: gasStationsEnController,                validator:                    (value) =>                        Validation.validateEnglishText(context, value ?? ''),              ),              BuildTextFieldItem(                title: strings.location_gas_stations,                keyboardType: TextInputType.name,                controller: mainLocationController,                onTap: () {},                showCustomEndIcon: true,                endIcon: AppIcons.locationPickerOutline,                onTapEndIcon: () async {                  MapPickerItem result = await navigatorMapPicker(context);                  mainLocationController.text = result.formattedAddress ?? '';                  mainLocation = LatLng(                    result.geometry?.location?.lat ?? 0.0,                    result.geometry?.location?.lng ?? 0.0,                  );                  print(result.geometry?.location);                },              ),              rowButtons(context),            ],          ),        ),      ),    );  }  Expanded dateTextFieldPickerExpanded(    String title,    TextEditingController controller,  ) {    return Expanded(      child: DateTextFieldPicker(        title: title,        controller: controller,        pattern: DateFormatter.DAY_MONTH_YEAR,      ),    );  }  rowButtons(BuildContext context) {    return RowButtons(      margin: const EdgeInsets.all(16),      onSave: () {        if (_formKey.currentState!.validate()) {          addEditGasStation(            AddEditGasStationPrams(              id: gasStation == null ? 0 : gasStation?.id,              companyId: companyId,              projectId: projectId,              latitude: mainLocation?.latitude ?? 0,              longtude: mainLocation?.longitude ?? 0,              stationNameAr: gasStationsArController.text,              stationNameEn: gasStationsEnController.text,            ),          );        }      },      onCancel: () {        Navigator.pop(context);      },    );  }  projectWidget() {    return StreamBuilder<List<CommonListItem>?>(      stream: projectsStream.stream,      builder: (context, snapshot) {        return snapshot.hasData            ? BottomSheetTextFieldRectangle(              title: strings.project,              initValue: gasStation?.projectName ?? '',              hintText: strings.select_project,              isScrollControlled: true,              setSearch: true,              items:                  snapshot.data!                      .map(                        (e) => Item(                          index: e.id ?? 0,                          description: e.name.toString(),                          value: e.name.toString(),                        ),                      )                      .toList(),              onSelectItem: (items) async {                projectId = items.index;              },            )            : SizedBox();      },    );  }}